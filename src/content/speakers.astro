---
import type {
  PersonalDetails,
  Speaker,
  Support,
  Ambassador,
  TalkDetails,
} from "../data/types";
import { CFP_OPEN } from "../data/constants";

import PersonCard from "../components/PersonCard.astro";
import PlaceholderCard from "../components/PlaceholderCard.astro";
import { getPersonIdFromFilePath } from "../utils";
import type { MarkdownInstance } from "astro";

const speakers = await Astro.glob<PersonalDetails>("../data/speakers/*.md");
const speakerTalks = await Astro.glob<TalkDetails>(
  "../data/speaker-talks/*.md"
);
const ambassadors = await Astro.glob<PersonalDetails>(
  "../data/ambassadors/*.md"
);
const support = await Astro.glob<PersonalDetails>("../data/support/*.md");

const getSpeakerInfo = (
  speakerMd: MarkdownInstance<PersonalDetails>
): Speaker => {
  const speakerId = getPersonIdFromFilePath(speakerMd.file);

  const speakerTalk = speakerTalks.find(
    (s) => speakerId === getPersonIdFromFilePath(s.file)
  );

  return {
    type: "speaker",
    id: speakerId,
    bio: speakerMd.frontmatter,
    BioMdContent: speakerMd.Content,
    talk: speakerTalk ? speakerTalk.frontmatter : null,
    TalkMdContent: speakerTalk ? speakerTalk.Content : null,
  };
};

const getSupportInfo = (
  supportMd: MarkdownInstance<PersonalDetails>
): Support => {
  const supportId = getPersonIdFromFilePath(supportMd.file);

  return {
    type: "support",
    id: supportId,
    bio: supportMd.frontmatter,
    BioMdContent: supportMd.Content,
  };
};

const getAmbassadorInfo = (
  ambassadorMd: MarkdownInstance<PersonalDetails>
): Ambassador => {
  const ambassadorId = getPersonIdFromFilePath(ambassadorMd.file);

  return {
    type: "ambassador",
    id: ambassadorId,
    bio: ambassadorMd.frontmatter,
    BioMdContent: ambassadorMd.Content,
  };
};
---

<div class="content center">
  <h2>First speakers announced</h2>
</div>

<ul role="list" class="person-list">
  {
    Object.values(speakers).map((s) => (
      <li class="person-list-item">
        <PersonCard person={getSpeakerInfo(s)} />
      </li>
    ))
  }
  {
    CFP_OPEN && (
      <li class="person-list-item">
        <PlaceholderCard
          imgName="/props/bear.svg"
          title="You?"
          subtitle="Submit your proposal"
          link="/speak-at-jsheroes"
        />
      </li>
    )
  }
</ul>

<div class="content center">
  <h2>Our support crew for 2023</h2>
</div>

<ul role="list" class="person-list">
  {
    support.map((s) => (
      <li class="person-list-item">
        <PersonCard person={getSupportInfo(s)} />
      </li>
    ))
  }
</ul>

<div class="content center">
  <h2>And our awesome ambassadors</h2>

  <p>
    An amazing group of people who said yes to the challenge of working with us
    at making JSHeroes awesome!
  </p>
</div>

<ul role="list" class="person-list">
  {
    ambassadors.map((a) => (
      <li class="person-list-item">
        <PersonCard person={getAmbassadorInfo(a)} />
      </li>
    ))
  }
</ul>

<style>
  .person-list {
    display: flex;
    flex-wrap: wrap;
    align-item: center;
    justify-content: center;
    gap: 2rem;
    padding: 2rem 0;
  }

  .person-list-item {
    list-style: none;
    padding-bottom: 1rem;
  }

  .person-list-item:nth-child(3n) {
    --person-accent-color: var(--color-accent-pink);
  }

  .person-list-item:nth-child(3n + 1) {
    --person-accent-color: var(--color-accent-orange);
  }

  .person-list-item:nth-child(3n + 2) {
    --person-accent-color: var(--color-accent-green);
  }
</style>
